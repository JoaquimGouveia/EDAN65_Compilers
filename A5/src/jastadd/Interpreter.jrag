aspect Interpreter {

    class ActivationRecord {
        public ActivationRecord() {

        }
    }

    public void Program.eval() {

        IdUse main = new IdUse("main");
        FuncDecl mainDecl = main.function();
        if (!mainDecl.getIdDecl().isUnknown()) {
            ActivationRecord actrec = new ActivationRecord();
            System.out.println(mainDecl.eval(actrec));
        } else {
            throw new RuntimeException();
        }
        
    }

    public int FuncDecl.eval(ActivationRecord actrec){
        for (Stmt stmt : getBlock().getStmtList()) {
            stmt.eval(actrec);
        } 
        return 1;
    }

    public void Stmt.eval(ActivationRecord actrec){
        throw new RuntimeException();
    }

    public void VarDeclStmt.eval(ActivationRecord actrec){
        getExpr().eval(actrec);
    }

    /*---------------------------------Expr---------------------------------*/

    public int Expr.eval(ActivationRecord actrec){
        throw new RuntimeException();
    }

    public int Add.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) + getRight().eval(actrec);
    }

    public int Mul.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) * getRight().eval(actrec);
    }
    
    public int Div.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) / getRight().eval(actrec);
    }

    public int Sub.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) - getRight().eval(actrec);
    }

    public int Mod.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) % getRight().eval(actrec);
    }

    public int Eq.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) == getRight().eval(actrec) ? 1 : 0;
    }

    public int Neq.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) != getRight().eval(actrec) ? 1 : 0;
    }

    public int Lt.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) < getRight().eval(actrec) ? 1 : 0;
    }

    public int Gt.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) > getRight().eval(actrec) ? 1 : 0;
    }

    public int Le.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) <= getRight().eval(actrec) ? 1 : 0;
    }

    public int Ge.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) >= getRight().eval(actrec) ? 1 : 0;
    }

    public int Neg.eval(ActivationRecord actrec) {
        return -(getExpr().eval(actrec));
    }

    public int Numeral.eval(ActivationRecord actrec) {
        return Integer.parseInt(getNUMERAL());
    }
}