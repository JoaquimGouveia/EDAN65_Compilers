import java.util.Scanner;

aspect Interpreter {

    class ActivationRecord {
        public ActivationRecord() {

        }
    }

    public void Program.eval() {

        ActivationRecord actrec = new ActivationRecord();
        IdDecl main = unknownDecl();
        for (FuncDecl func : getFuncDecls()){
            if (func.getIdDecl().getID().equals("main")){
                main = func.getIdDecl();
                func.eval(actrec);
            }
        }
        if (main.isUnknown()) throw new RuntimeException();
    }

    public int FuncDecl.eval(ActivationRecord actrec){
        for (Stmt stmt : getBlock().getStmtList()) {
            stmt.eval(actrec);
        } 
        return 1;
    }

    public void Stmt.eval(ActivationRecord actrec){
        System.out.println("Stmt");
    }

    public void VarDeclStmt.eval(ActivationRecord actrec){
        System.out.println(getExpr().eval(actrec)); //REMOVE SYSTEM.OUT.PRINTLN
    }

    public void FunctionCallStmt.eval(ActivationRecord actrec){
        getFunctionCall().eval(actrec);
    }

    public int FunctionCall.eval(ActivationRecord actrec){
        if (getIdUse().getID().equals("print")){
            for (Expr expr : getExprList()){
                System.out.println(expr.eval(actrec));
            }
        }

        if (getIdUse().getID().equals("read")){
            Scanner scanner = new Scanner(System.in);

            int value = 0;

            while (scanner.hasNext()){
                value = scanner.nextInt();
            }

            return value;
        }

        return 0;

    }

    /*---------------------------------Expr---------------------------------*/

    public int Expr.eval(ActivationRecord actrec){
        System.out.println("Expr");
        throw new RuntimeException();
    }

    public int Add.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) + getRight().eval(actrec);
    }

    public int Mul.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) * getRight().eval(actrec);
    }
    
    public int Div.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) / getRight().eval(actrec);
    }

    public int Sub.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) - getRight().eval(actrec);
    }

    public int Mod.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) % getRight().eval(actrec);
    }

    public int Eq.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) == getRight().eval(actrec) ? 1 : 0;
    }

    public int Neq.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) != getRight().eval(actrec) ? 1 : 0;
    }

    public int Lt.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) < getRight().eval(actrec) ? 1 : 0;
    }

    public int Gt.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) > getRight().eval(actrec) ? 1 : 0;
    }

    public int Le.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) <= getRight().eval(actrec) ? 1 : 0;
    }

    public int Ge.eval(ActivationRecord actrec) {
        return getLeft().eval(actrec) >= getRight().eval(actrec) ? 1 : 0;
    }

    public int Neg.eval(ActivationRecord actrec) {
        return -(getExpr().eval(actrec));
    }

    public int Numeral.eval(ActivationRecord actrec) {
        return Integer.parseInt(getNUMERAL());
    }
}