import java.util.Set;
import java.util.HashSet;

aspect NameAnalysis {
    public class SymbolTable {
        private static final SymbolTable BOTTOM = new SymbolTable() {
            @Override
            public boolean declare(String name) {
                throw new UnsupportedOperationException(
                        "cannot add name to bottom of name stack");
            }
            @Override
            public boolean lookup(String name) {
                return false;
            }
        };

        private final SymbolTable tail;
        private final Set<String> names = new HashSet<String>();

        public SymbolTable() {
            tail = BOTTOM;
        }

        public SymbolTable(SymbolTable tail) {
            this.tail = tail;
        }

        /**
         * Attempt to add a new name to the symbol table.
         * @return true if name was not already declared
         */
        public boolean declare(String name) {
            return names.add(name);
        }

        /**
         * @return true if name has been declared
         */
        public boolean lookup(String name) {
            return names.contains(name) || tail.lookup(name);
        }

        /**
         * Push a new table on the stack.
         * @return the new top of the stack
         */
        public SymbolTable push() {
            return new SymbolTable(this);
        }
    }

    /**
     * @param err where to write error messages
     */
    public void Program.checkNames(PrintStream err) {
        SymbolTable symbols = new SymbolTable();

        symbols.declare("print");
        symbols.declare("read");
        checkNames(err, symbols);
    }

    /**
     * @param err where to write error messages
     * @param symbols symbol table
     */
    public void ASTNode.checkNames(PrintStream err, SymbolTable symbols) {
    for (ASTNode child : astChildren()) {
          child.checkNames(err, symbols);
        }
    }

	public void FuncDecl.checkNames(PrintStream err, SymbolTable symbols) {
		getIdDecl().checkNames(err, symbols);
		if(hasParam()) {
			symbols = symbols.push();
			for(Param param : getParams()) {
				param.checkNames(err, symbols);
			}
		}
        getBlock().checkNames(err, symbols);
	}

    public void Param.checkNames(PrintStream err, SymbolTable symbols) {
        if (!symbols.declare(getID())) {
            err.format("Error at line %d: symbol \'%s\' is already declared!", getLine(), getID());
            err.println();
            //System.exit(1);
        }
    }
    
    public void Block.checkNames(PrintStream err, SymbolTable symbols) {
        symbols = symbols.push();
        if (hasStmt()) {
            for (Stmt stmt : getStmts()) {
                stmt.checkNames(err, symbols);
            }
        }
    }

    public void VarDeclStmt.checkNames(PrintStream err, SymbolTable symbols) {
        getIdDecl().checkNames(err, symbols);
        if (hasExpr()) {
            getExpr().checkNames(err, symbols);
        }
    }

    public void VarAssignStmt.checkNames(PrintStream err, SymbolTable symbols) {
        getIdUse().checkNames(err, symbols);
        getNumeral().checkNames(err, symbols);
     }

    public void FunctionCallStmt.checkNames(PrintStream err, SymbolTable symbols) {
        getFunctionCall().checkNames(err, symbols);
    }

    public void ReturnStmt.checkNames(PrintStream err, SymbolTable symbols) {
        if (getExpr() != null) { //Beh√∂vs detta? 
            getExpr().checkNames(err, symbols);
        }
    }

    public void WhileStmt.checkNames(PrintStream err, SymbolTable symbols) {
        getExpr().checkNames(err, symbols);
        getBlock().checkNames(err, symbols);
    }

    public void IfStmt.checkNames(PrintStream err, SymbolTable symbols) {
        getExpr().checkNames(err, symbols);
        getThenBlock().checkNames(err, symbols);
        if (hasElseBlock()) {
            getElseBlock().checkNames(err, symbols);
        }
    }

    public void FunctionCall.checkNames(PrintStream err, SymbolTable symbols) {
        getIdUse().checkNames(err, symbols);
        for (Expr expr : getExprs()){
            expr.checkNames(err, symbols);
        }
    }

    
    public void IdDecl.checkNames(PrintStream err, SymbolTable symbols) {
        if (!symbols.declare(getID())) {
            err.format("Error at line %d: symbol \'%s\' is already declared!", getLine(), getID());
            err.println();
            //System.exit(1);
        }
    }

    public void IdUse.checkNames(PrintStream err, SymbolTable symbols) {
        if (!symbols.lookup(getID())) {
            err.format("Error at line %d: symbol \'%s\' has not been declared before this use!", getLine(), getID());
            err.println();
            //System.exit(1);
        }
    }

    /**
     * Helper method
     * @return line number of this token
     */
    public int ASTNode.getLine() {
        return getLine(getStart());
    }
}
