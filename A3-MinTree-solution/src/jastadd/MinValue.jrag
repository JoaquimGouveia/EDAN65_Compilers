aspect MinValue {
    // Exercise 1
    /*
    * Pay attention! expression-style equations is defined with "="
    * while block-style equations just need braces "{}"
    *
    * For synthetic attributes the equation has to be declared in the same Node object
    * The equations can use tokens and attributes of the node and its children
    * Meaning that information flows upwards in the ASTree
    */ 
    syn int Node.localMin() = 0;
    eq Pair.localMin() {
        int left = getLeft().localMin();
        int right = getRight().localMin();
        return left < right ? left : right;
    }
    eq Leaf.localMin() = getNumber();

    // Exercise 2
    /*
    * For inherited attributes, the equation is defined by the Program node,
    * which is an ancestor in the AST. Information
    * for this type of attirbutes flows instead downwards in the ASTree
    * Note that we specify the child (getNode) for which the equation is valid, according to the names in the
    * abstract grammar. The equation above states that the value of the attribute globalMin is ... for the
    * child Node. The code ... executes in the context of Program, and can access attributes, tokens, and
    * children in Program. 
    */
    inh int Node.globalMin();
    eq Program.getNode().globalMin() = getNode().localMin();

    // Exercise 3
    // if localMin == globalMin then true else false
    syn boolean Leaf.isMinValue() = localMin() == globalMin();
    
    // Exercise 4
    /*
    * Program.nbrOfMinValues() computes the global number of min values in the tree.
    * The global number of min values in the tree is the same as the local number of min values
    * in the root node of the tree.
    * Node.nbrOfMinValues() computes the local number of min values for its subtree.
    * Meaning that for a leaf this number is eithher 1 or 0 (depending on if it's number is the same as the global min value)
    * For a Pair it will instead be the sum of the local number of min values in its children's subtrees.
    */
    syn int Program.nbrOfMinValues() = getNode().nbrOfMinValues();
    syn int Node.nbrOfMinValues() = 0;
    eq Leaf.nbrOfMinValues() = isMinValue() ? 1 : 0;
    eq Pair.nbrOfMinValues() = getLeft().nbrOfMinValues() + getRight().nbrOfMinValues();
}
