%class "LangParser";
%package "lang.ast";

%embed {:
    static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
    // Disable syntax error recovery
    protected void recoverFromError(Symbol token, TokenStream in) {
        throw new SyntaxError("Cannot recover from the syntax error");
    }
:};

%terminals ID, INT, IF, PLUS, MINUS, MUL, DIV, MOD, EQ, NE, LT, LE, GT, GE, LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON, COMMA, ASSIGN, WHILE, RETURN, NUMERAL;

%typeof program = "Program";
%typeof func_decl_list = "List";
%typeof func_decl = "FuncDecl";
%typeof func_body = "FuncBody";
%typeof id_decl = "IdDecl";

%goal program;

program = func_decl_list.a {: return new Program(a); :};

func_decl_list = func_decl.a {: return new List().add(a); :}
                | func_decl_list.a func_decl.b {: return a.add(b); :}
                ;
func_decl = INT.a id_decl.b LPAREN.c RPAREN.d func_body.e {: return new FuncDecl(a,b,c,d,e); :};
func_body = LBRACE.a RBRACE.b {: return new FuncBody(a, b); :};
id_decl = ID.id {: return new IdDecl(id); :};