/**
 * Simple code generation for the Calc language (EDAN65 course labs).
 * @author Jesper Ã–qvist
 */
 // java -jar compiler.jar myfile > x.s && as --gstabs x.s -o x.o && ld x.o && ./a.out

 aspect CodeGen {

    public void Program.genCode(PrintStream out) {
      out.println(".global _start");
      out.println(".data");
      out.println("ask_message: .ascii \"Please enter a number: \"");
      out.println("ask_msg_len: .quad 23");
      out.println("buf: .skip 1024");
      out.println();
      out.println(".text");
      out.println("_start:");
  
      // Call main function:
      out.println("        call main");
  
      // Call sys_exit:
      out.println("        movq $0, %rdi");
      out.println("        movq $60, %rax");
      out.println("        syscall"); // Done!
  
      // Helper procedures for input/output:
      out.println("# Procedure to print number to stdout.");
      out.println("# C signature: void print(long int)");
      out.println("print:");
      out.println("        pushq %rbp");
      out.println("        movq %rsp, %rbp");
      out.println("        ### Convert integer to string (itoa).");
      out.println("        movq 16(%rbp), %rax");
      out.println("        leaq buf(%rip), %rsi    # RSI = write pointer (starts at end of buffer)");
      out.println("        addq $1023, %rsi");
      out.println("        movb $0x0A, (%rsi)      # insert newline");
      out.println("        movq $1, %rcx           # RCX = string length");
      out.println("        cmpq $0, %rax");
      out.println("        jge itoa_loop");
      out.println("        negq %rax               # negate to make RAX positive");
      out.println("itoa_loop:                      # do.. while (at least one iteration)");
      out.println("        movq $10, %rdi");
      out.println("        cqo                     # sign extend RAX to RDX to prepare for idiv");
      out.println("        idivq %rdi              # divide RDX:RAX by 10");
      out.println("        addb $0x30, %dl         # remainder + '0'");
      out.println("        decq %rsi               # move string pointer");
      out.println("        movb %dl, (%rsi)");
      out.println("        incq %rcx               # increment string length");
      out.println("        cmpq $0, %rax");
      out.println("        jg itoa_loop            # produce more digits");
      out.println("itoa_done:");
      out.println("        movq 16(%rbp), %rax");
      out.println("        cmpq $0, %rax");
      out.println("        jge print_end");
      out.println("        decq %rsi");
      out.println("        incq %rcx");
      out.println("        movb $0x2D, (%rsi)");
      out.println("print_end:");
      out.println("        movq $1, %rdi");
      out.println("        movq %rcx, %rdx");
      out.println("        movq $1, %rax");
      out.println("        syscall");
      out.println("        popq %rbp");
      out.println("        ret");
      out.println("");
      out.println("# Procedure to read number from stdin.");
      out.println("# C signature: long long int read(void)");
      out.println("read:");
      out.println("        pushq %rbp");
      out.println("        movq %rsp, %rbp");
      out.println("        ### R9  = sign");
      out.println("        movq $1, %r9            # sign <- 1");
      out.println("        ### R10 = sum");
      out.println("        movq $0, %r10           # sum <- 0");
      out.println("skip_ws: # skip any leading whitespace");
      out.println("        movq $0, %rdi");
      out.println("        leaq buf(%rip), %rsi");
      out.println("        movq $1, %rdx");
      out.println("        movq $0, %rax");
      out.println("        syscall                 # get one char: sys_read(0, buf, 1)");
      out.println("        cmpq $0, %rax");
      out.println("        jle atoi_done           # nchar <= 0");
      out.println("        movb (%rsi), %cl        # c <- current char");
      out.println("        cmp $32, %cl");
      out.println("        je skip_ws              # c == space");
      out.println("        cmp $13, %cl");
      out.println("        je skip_ws              # c == CR");
      out.println("        cmp $10, %cl");
      out.println("        je skip_ws              # c == NL");
      out.println("        cmp $9, %cl");
      out.println("        je skip_ws              # c == tab");
      out.println("        cmp $45, %cl            # check if negative");
      out.println("        jne atoi_loop");
      out.println("        movq $-1, %r9           # sign <- -1");
      out.println("        movq $0, %rdi");
      out.println("        leaq buf(%rip), %rsi");
      out.println("        movq $1, %rdx");
      out.println("        movq $0, %rax");
      out.println("        syscall                 # get one char: sys_read(0, buf, 1)");
      out.println("atoi_loop:");
      out.println("        cmpq $0, %rax           # while (nchar > 0)");
      out.println("        jle atoi_done           # leave loop if nchar <= 0");
      out.println("        movzbq (%rsi), %rcx     # move byte, zero extend to quad-word");
      out.println("        cmpq $0x30, %rcx        # test if < '0'");
      out.println("        jl atoi_done            # character is not numeric");
      out.println("        cmpq $0x39, %rcx        # test if > '9'");
      out.println("        jg atoi_done            # character is not numeric");
      out.println("        imulq $10, %r10         # multiply sum by 10");
      out.println("        subq $0x30, %rcx        # value of character");
      out.println("        addq %rcx, %r10         # add to sum");
      out.println("        movq $0, %rdi");
      out.println("        leaq buf(%rip), %rsi");
      out.println("        movq $1, %rdx");
      out.println("        movq $0, %rax");
      out.println("        syscall                 # get one char: sys_read(0, buf, 1)");
      out.println("        jmp atoi_loop           # loop back");
      out.println("atoi_done:");
      out.println("        imulq %r9, %r10         # sum *= sign");
      out.println("        movq %r10, %rax         # put result value in RAX");
      out.println("        popq %rbp");
      out.println("        ret");
      out.println();
      out.println("print_string:");
      out.println("        pushq %rbp");
      out.println("        movq %rsp, %rbp");
      out.println("        movq $1, %rdi");
      out.println("        movq 16(%rbp), %rsi");
      out.println("        movq 24(%rbp), %rdx");
      out.println("        movq $1, %rax");
      out.println("        syscall");
      out.println("        popq %rbp");
      out.println("        ret");
  
      for (FuncDecl func : getFuncDeclList()) {
        func.genCode(out);
      }
    }
  
    public void FuncDecl.genCode(PrintStream out) {
      out.println("### " + getIdDecl().getID() + " ###");
      out.println(getIdDecl().getID() + ":");
      out.println("        pushq %rbp");
      out.println("        movq %rsp, %rbp");

      //for (Param param : Collections.reverse(getParams().clone())) {
      //  param.genCode(out);
      //}
      // Generate code for the function body
      getBlock().genCode(out);
  
      out.println("        popq %rbp");
      out.println("        ret");
      out.println();
    }
  
    public void Param.genCode(PrintStream out) {
      out.println("        movq %rdi, " + getIdDecl().getID());
    }

    public void Block.genCode(PrintStream out) {
      for (Stmt stmt : getStmts()) {
        stmt.genCode(out);
      }
    }

    abstract public void Stmt.genCode(PrintStream out);

    public void ReturnStmt.genCode(PrintStream out) {
      getExpr().genEval(out);
      out.println("        movq %rbp, %rsp");
      out.println("        popq %rbp");
      out.println("        ret");
    }

    public void VarDeclStmt.genCode(PrintStream out) {
      if (hasExpr()) {
        getExpr().genEval(out);
        out.println("        movq %rax, " + getIdDecl().address());
      } else {
        out.println("        movq $0, %rax");
        out.println("        movq %rax, " + getIdDecl().address());
      }
    }

    public void VarAssignStmt.genCode(PrintStream out) {
      getExpr().genEval(out);
      out.println("        movq %rax, " + getIdUse().decl().address());
    }

    public void FunctionCallStmt.genCode(PrintStream out) {
      getFunctionCall().genEval(out);
    }


    // Imagine that the condition is (a < b)
    // if the condition is false, that is if a >= b, then we jump to the end of the loop
    // Inverted conditions are used to avoid the jump instruction
    public void WhileStmt.genCode(PrintStream out) {
      String whileStart = uniqueName() + "while_start"; //labels
      String whileEnd = uniqueName() + "while_end";
      out.println(whileStart + ":"); //start of while loop
      getExpr().genConditionJump(out, whileEnd); //if the condition is false, jump to the end of the loop
      getBlock().genCode(out); //else evaluate the block
      out.println("        jmp " + whileStart); //jump back to start
      out.println(whileEnd + ":"); //Done
    }

    public void IfStmt.genCode(PrintStream out) {
      String ifEnd = uniqueName() + "if_end";
      if (hasElseBlock()) {
        String ifElse = uniqueName() + "if_else";
        getExpr().genConditionJump(out, ifElse);
        getThenBlock().genCode(out); // Did not jump so we can execute the Then Block
        out.println("        jmp " + ifEnd); // After that we jump to ifEnd
        out.println(ifElse + ":"); // Here we define the Else Block
        getElseBlock().genCode(out);
      } else {
        getExpr().genConditionJump(out, ifEnd);
        getThenBlock().genCode(out);
      }
      out.println(ifEnd + ":");
    }

    abstract public void Expr.genEval(PrintStream out);

    public void Add.genEval(PrintStream out) {
      getLeft().genEval(out);
      out.println("        pushq %rax");
      getRight().genEval(out);
      out.println("        movq %rax, %rbx");
      out.println("        popq %rax");
      out.println("        addq %rbx, %rax");
    }

    public void Mul.genEval(PrintStream out) {
      getLeft().genEval(out);
      out.println("        pushq %rax");
      getRight().genEval(out);
      out.println("        movq %rax, %rbx");
      out.println("        popq %rax");
      out.println("        imulq %rbx");
    }

    public void Div.genEval(PrintStream out) {
      getLeft().genEval(out);
      out.println("        pushq %rax");
      getRight().genEval(out);
      out.println("        movq %rax, %rbx");
      out.println("        popq %rax");
      out.println("        cqo");        // NB: sign extend RAX to RDX to prepare for idiv
      out.println("        idivq %rbx");
    }

    public void Sub.genEval(PrintStream out) {
      getLeft().genEval(out);
      out.println("        pushq %rax");
      getRight().genEval(out);
      out.println("        movq %rax, %rbx");
      out.println("        popq %rax");
      out.println("        subq %rbx, %rax");
    }

    public void Mod.genEval(PrintStream out) {
      getLeft().genEval(out);
      out.println("        pushq %rax");
      getRight().genEval(out);
      out.println("        movq %rax, %rbx");
      out.println("        popq %rax");
      out.println("        cqo");        // NB: sign extend RAX to RDX to prepare for idiv
      out.println("        idivq %rbx");
      out.println("        movq %rdx, %rax");
    }

    public void Neg.genEval(PrintStream out) {
      getExpr().genEval(out);
      out.println("        negq %rax");
    }

    public void Eq.genEval(PrintStream out) {
      getLeft().genEval(out);
      out.println("        pushq %rax");
      getRight().genEval(out);
      out.println("        movq %rax, %rbx");
      out.println("        popq %rax");
      out.println("        cmpq %rbx, %rax");
    }

    public void Neq.genEval(PrintStream out) {
      getLeft().genEval(out);
      out.println("        pushq %rax");
      getRight().genEval(out);
      out.println("        movq %rax, %rbx");
      out.println("        popq %rax");
      out.println("        cmpq %rbx, %rax");
    }

    public void Lt.genEval(PrintStream out) {
      getLeft().genEval(out);
      out.println("        pushq %rax");
      getRight().genEval(out);
      out.println("        movq %rax, %rbx");
      out.println("        popq %rax");
      out.println("        cmpq %rbx, %rax");
    }

    public void Gt.genEval(PrintStream out) {
      getLeft().genEval(out);
      out.println("        pushq %rax");
      getRight().genEval(out);
      out.println("        movq %rax, %rbx");
      out.println("        popq %rax");
      out.println("        cmpq %rbx, %rax");
    }

    public void Le.genEval(PrintStream out) {
      getLeft().genEval(out);
      out.println("        pushq %rax");
      getRight().genEval(out);
      out.println("        movq %rax, %rbx");
      out.println("        popq %rax");
      out.println("        cmpq %rbx, %rax");
    }

    public void Ge.genEval(PrintStream out) {
      getLeft().genEval(out);
      out.println("        pushq %rax");
      getRight().genEval(out);
      out.println("        movq %rax, %rbx");
      out.println("        popq %rax");
      out.println("        cmpq %rbx, %rax");
    }

    public void IdUse.genEval(PrintStream out) {
      out.println("        movq " + decl().address() + ", %rax");
    }

    public void Numeral.genEval(PrintStream out) {
      out.println("        movq $" + getNUMERAL() + ", %rax");
    }

    public void FunctionCall.genEval(PrintStream out) {
      for (int i = getNumExpr() - 1; i >= 0; i--) {
        getExpr(i).genEval(out);
        out.println("        pushq %rax");
      }
      out.println("        call " + getIdUse().getID());
      out.println("        addq $" + (8 * getNumExpr()) + ", %rsp"); // Clean up the stack
    }

    public void Expr.genConditionJump(PrintStream out, String target) {
    }

    public void Eq.genConditionJump(PrintStream out, String target) {
      genEval(out);
      out.println("        jne " + target);
    }

    public void Neq.genConditionJump(PrintStream out, String target) {
      genEval(out);
      out.println("        je " + target);
    }

    public void Lt.genConditionJump(PrintStream out, String target) {
      genEval(out);
      out.println("        jge " + target);
    }

    public void Gt.genConditionJump(PrintStream out, String target) {
      genEval(out);
      out.println("        jle " + target);
    }

    public void Le.genConditionJump(PrintStream out, String target) {
      genEval(out);
      out.println("        jg " + target);
    }

    public void Ge.genConditionJump(PrintStream out, String target) {
      genEval(out);
      out.println("        jl " + target);
    }

    //-------------------------------Unique names for whiles and ifs-----------------------------------------
    inh String IfStmt.uniqueName();
    inh String WhileStmt.uniqueName();
    inh String Block.uniqueName();
    eq Block.getStmt(int i).uniqueName() = uniqueName() + "_" + i;
    eq FuncDecl.getBlock().uniqueName() = getIdDecl().getID();

    //-------------------------------Stack index for parameters-----------------------------------------
    inh int IdDecl.parameterIndex();
    eq FuncDecl.getParam(int i).parameterIndex() = i; // will need to add 2 to this index to get the correct address
    eq Program.getChild().parameterIndex() = 0;

    syn String IdDecl.address() {
      if (isParam()) {
        return 8*(parameterIndex() + 2) + "(%rbp)";
      } else {
        return "-" + 8*(localIndex()) + "(%rbp)";
      }
    }

    //-------------------------------Stack index for local variables-----------------------------------------
    syn int ASTNode.localIndex() = prevNode().localIndex();
    eq Program.localIndex() = 0;
    eq FuncDecl.localIndex() = 0;
    eq IdDecl.localIndex() = prevNode().localIndex() + 1;
    inh ASTNode ASTNode.prevNode();
    eq ASTNode.getChild(int i).prevNode() = prevNode(i);
    syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
    syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;


    // Local variable counting
    syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

    //-------------------------------Check if IdDecl is a Param-----------------------------------------
    inh boolean IdDecl.isParam();
    eq Program.getChild().isParam() = false;
    eq FuncDecl.getParam(int i).isParam() = true;
  }